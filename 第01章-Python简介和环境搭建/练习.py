#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
第01章 - Python简介和环境搭建
练习题

完成以下练习来巩固本章学习内容
"""

# ============================================================================
# 练习1: 基础输出练习
# ============================================================================

print("练习1: 基础输出练习")
print("-" * 30)

# TODO: 使用print()函数输出以下内容：
# 1. 你的姓名
# 2. 你学习Python的目标
# 3. 今天的日期

# 在这里写你的代码：




print("\n")

# ============================================================================
# 练习2: 环境信息获取
# ============================================================================

print("练习2: 环境信息获取")
print("-" * 30)

# TODO: 导入sys模块，并输出以下信息：
# 1. Python版本
# 2. 平台信息
# 3. Python解释器路径

# 在这里写你的代码：




print("\n")

# ============================================================================
# 练习3: 简单计算
# ============================================================================

print("练习3: 简单计算")
print("-" * 30)

# TODO: 计算并输出以下结果：
# 1. 365 * 24 (一年有多少小时)
# 2. 60 * 60 * 24 (一天有多少秒)
# 3. 100 / 3 (保留小数)
# 4. 2 ** 10 (2的10次方)

# 在这里写你的代码：




print("\n")

# ============================================================================
# 练习4: 字符串操作
# ============================================================================

print("练习4: 字符串操作")
print("-" * 30)

# TODO: 创建变量并进行字符串操作：
# 1. 创建一个包含你名字的变量
# 2. 创建一个包含你年龄的变量
# 3. 使用f-string格式化输出一句自我介绍

# 在这里写你的代码：




print("\n")

# ============================================================================
# 练习5: 创建你的第一个函数
# ============================================================================

print("练习5: 创建你的第一个函数")
print("-" * 30)

# TODO: 创建一个名为greet的函数，接受一个name参数，
# 返回格式为"Hello, [name]! Welcome to Python!"的问候语

def greet(name):
    # 在这里写你的代码：
    pass

# 测试你的函数
# test_name = "张三"
# print(greet(test_name))

print("\n")

# ============================================================================
# 练习6: 模块导入练习
# ============================================================================

print("练习6: 模块导入练习")
print("-" * 30)

# TODO: 导入datetime模块，并输出当前的日期和时间

# 在这里写你的代码：




print("\n")

# ============================================================================
# 挑战练习: 创建一个简单的计算器函数
# ============================================================================

print("挑战练习: 简单计算器")
print("-" * 30)

# TODO: 创建一个calculator函数，接受三个参数：num1, operator, num2
# 支持基本的四则运算：+, -, *, /
# 返回计算结果，如果除数为0则返回错误信息

def calculator(num1, operator, num2):
    # 在这里写你的代码：
    pass

# 测试你的计算器函数
# print(calculator(10, '+', 5))  # 应该输出 15
# print(calculator(10, '-', 3))  # 应该输出 7
# print(calculator(6, '*', 4))   # 应该输出 24
# print(calculator(8, '/', 2))   # 应该输出 4.0
# print(calculator(5, '/', 0))   # 应该输出错误信息

print("\n")

# ============================================================================
# 练习答案检查
# ============================================================================

def check_answers():
    """检查练习完成情况的辅助函数"""
    print("="*50)
    print("练习完成情况检查")
    print("="*50)
    
    exercises = [
        "练习1: 基础输出练习",
        "练习2: 环境信息获取", 
        "练习3: 简单计算",
        "练习4: 字符串操作",
        "练习5: 创建你的第一个函数",
        "练习6: 模块导入练习",
        "挑战练习: 简单计算器"
    ]
    
    print("请确保你已经完成以下练习：")
    for i, exercise in enumerate(exercises, 1):
        print(f"{i}. {exercise}")
    
    print("\n💡 提示：")
    print("- 如果遇到困难，可以查看示例代码.py文件")
    print("- 可以在Python交互式解释器中测试你的代码")
    print("- 不要害怕出错，错误是学习的一部分！")

# 如果直接运行此文件，显示练习检查信息
if __name__ == "__main__":
    check_answers()
